#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\begin_modules
fix-cm
logicalmkup
\end_modules
\maintain_unincluded_children false
\language french
\language_package auto
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle plain
\bullet 0 5 2 -1
\bullet 1 0 26 -1
\bullet 2 0 12 -1
\bullet 3 0 8 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\family roman
\shape smallcaps
Aide Mémoire - Langage C++
\end_layout

\begin_layout Author
Philippe Roussel
\begin_inset Newline newline
\end_inset


\size small
version 0.1
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
labelitemi{
\backslash
textbullet}
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
labelitemii{
\backslash
normalfont
\backslash
bfseries
\backslash
textendash}
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
labelitemiii{
\backslash
textasteriskcentered}
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand
\backslash
labelitemiv{
\backslash
textperiodcentered}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Évolutions et nouveautés hors système objet
\end_layout

\begin_layout Standard
Le langage C++ est à l'origine un sur-ensemble du C, c'est-à-dire un langage
 entièrement compatible (tout programme écrit en C est compilable par un
 compileur C++) offrant une abstraction objet et quelques autres nouveautés.
 Il est toutefois important de noter que cette vérité n'en est plus vraiment
 une avec les dernières évolutions des deux langages.
 Ces évolutions étant gérées par deux instances différentes et qui semblent
 ne pas communiquer beaucoup, chaque langage suit désormais sa propre voie.
\end_layout

\begin_layout Standard
Dans le cadre du BTS IRIS nous ferons abstraction des ces évolutions récentes.
\end_layout

\begin_layout Subsection
Le type 
\emph on
bool
\end_layout

\begin_layout Standard
Les variables booléennes ont leur propre type, 
\emph on
bool
\emph default
, qui accepte deux valeurs : 
\emph on
false
\emph default
 et 
\emph on
true.
\end_layout

\begin_layout LyX-Code
bool maVariable = true;
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
if (maVariable == false) { autreVariable = 66; }
\end_layout

\begin_layout Standard
La conversion avec les numériques est implicite : 
\emph on
false = 0
\emph default
 et 
\emph on
true = 1
\end_layout

\begin_layout Subsection
Valeurs par défaut pour les arguments de fonctions
\end_layout

\begin_layout Standard
Il est possible d'indiquer dans la définition d'une fonction des valeurs
 par défaut pour certains de ses arguments.
 Ces arguments pourront alors être 'oubliés' lors de l'appel à cette fontion.
 Par exemple :
\end_layout

\begin_layout LyX-Code
void afficheNombre(int nombre, int base = 10)
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_deeper
\begin_layout LyX-Code
switch (base) {
\end_layout

\begin_layout LyX-Code
  case 10:
\end_layout

\begin_layout LyX-Code
    printf("%d", nombre);  /* Affichage en base 10 */
\end_layout

\begin_layout LyX-Code
    break;
\end_layout

\begin_layout LyX-Code
  case 16:
\end_layout

\begin_layout LyX-Code
    printf("%x", nombre);  /* Affichage en hexadécimal */
\end_layout

\begin_layout LyX-Code
    break;
\end_layout

\begin_layout LyX-Code
  default:
\end_layout

\begin_layout LyX-Code
    printf("%d", nombre);  /* Base inconnue, on affiche en décimal */
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
afficheNombre(37, 16);  /* Affiche 0x25 */
\end_layout

\begin_layout LyX-Code
afficheNombre(44);      /* Base décimale par défaut, affiche 44 */	
\end_layout

\begin_layout Standard
Les arguments optionnels sont définis depuis le dernier vers le premier.
 Il est par exemple interdit de définir la fonction ayant un argument obligatoir
e entouré de deux arguments facultatifs.
\end_layout

\begin_layout LyX-Code
/* 
\end_layout

\begin_layout LyX-Code
 * Le code suivant n'est pas valide pour une bonne raison :
\end_layout

\begin_layout LyX-Code
 * il est impossible de déterminer lors de l'appel de la
\end_layout

\begin_layout LyX-Code
 * fonction si a=11, b=22 et c=2 ou si a=1, b=11 et c=22
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\begin_layout LyX-Code
void interdit(int a=1, int b, int c=2);
\end_layout

\begin_layout LyX-Code
interdit(11, 22);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Surcharge des noms de fonctions
\end_layout

\begin_layout Standard
Il est possible d'utiliser le même nom pour plusieurs fonctions si la signature
 de chacune d'elles est unique.
 La signature d'une fonction est définie par son nom, le nombre et le type
 de chacun de ses arguments.
 Le type de retour ne modifie par la signature.
 Exemple :
\end_layout

\begin_layout LyX-Code
int minimum(int, int);
\end_layout

\begin_layout LyX-Code
float minimum(float, int);
\end_layout

\begin_layout LyX-Code
float minimum(float, float);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/* Interdit car même signature que la première fonction */
\end_layout

\begin_layout LyX-Code
float minimum(int, int);
\end_layout

\begin_layout Subsection
Gestion de la mémoire dynamique
\end_layout

\begin_layout Standard
Le C++ introduit deux nouveaux opérateurs (et non pas fonctions, ils sont
 donc surchargeables) dédiés à la gestion de la mémoire : 
\emph on
new
\emph default
 et 
\emph on
delete
\emph default
.
 
\emph on
new 
\emph default
alloue la mémoire nécessaire pour stocker un objet (ou un tableau d'objets
 pour la 2
\begin_inset Formula $^{ème}$
\end_inset

 syntaxe) dont le type est passé en paramètre (
\emph on
new
\emph default
 retourne 0 en cas d'erreur) :
\end_layout

\begin_layout LyX-Code
int *pEntier = new int;
\end_layout

\begin_layout LyX-Code
float *tableauFloat = new float[20];
\end_layout

\begin_layout Standard
L'opérateur 
\family typewriter
\emph on
delete
\emph default
 permet de libérer la mémoire utilisée par un objet ou un tableau d'objets
 :
\end_layout

\begin_layout LyX-Code
delete pEntier;
\end_layout

\begin_layout LyX-Code
delete [] tableauFloat;
\end_layout

\begin_layout Standard
L'utilisation des fonctions 
\emph on
malloc
\emph default
, 
\emph on
free
\emph default
, 
\emph on
realloc
\emph default
 etc est possible mais un mixte des deux méthodes n'est pas possible pour
 un même objet.
\end_layout

\begin_layout Subsection
Passage de valeur par référence
\end_layout

\begin_layout Subsection
Les flux
\end_layout

\begin_layout Section
Programmation objet
\end_layout

\begin_layout Subsection
Vocabulaire
\end_layout

\begin_layout Subsection
Définition d'une classe
\end_layout

\begin_layout Standard
Pour simplifier, le concept de classe généralise celui de structure : on
 regroupe dans un même objet des données liées (les attributs) et les fonctions
 manipulant ces données (les méthodes).
\end_layout

\begin_layout Standard
Le nouveau mot clé 
\emph on
class
\emph default
 permet de définir une classe.
 Syntaxe :
\end_layout

\begin_layout LyX-Code
class NomDeLaClasse
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
};
\end_layout

\begin_layout Standard
Les mots 
\emph on
public
\emph default
, 
\emph on
protected
\emph default
, 
\emph on
private
\emph default
 permettent de définir la visibilité de chaque membre (attribut ou méthode)
 de la classe.
\end_layout

\begin_layout LyX-Code
class NomDeLaClasse
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_deeper
\begin_layout LyX-Code
private:
\end_layout

\begin_deeper
\begin_layout LyX-Code
int donneePrivee;
\end_layout

\end_deeper
\begin_layout LyX-Code
public:
\end_layout

\begin_deeper
\begin_layout LyX-Code
int lectureDonnee();
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout Standard
L'implémentation des méthodes d'une classe peut se faire de 2 manières,
 à 2 endroits :
\end_layout

\begin_layout Itemize
soit intégrée à de la définition de la classe
\end_layout

\begin_layout LyX-Code
class NomDeLaClasse
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_deeper
\begin_layout LyX-Code
private:
\end_layout

\begin_deeper
\begin_layout LyX-Code
int donneePrivee;
\end_layout

\end_deeper
\begin_layout LyX-Code
public:
\end_layout

\begin_deeper
\begin_layout LyX-Code
int lectureDonnee() {
\end_layout

\begin_deeper
\begin_layout LyX-Code
return donneePrivee;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout Itemize
soit de manière séparée (définition dans un 
\emph on
.h
\emph default
, implémentation dans le 
\emph on
.cpp
\emph default
 par exemple)
\end_layout

\begin_layout LyX-Code
class NomDeLaClasse
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_deeper
\begin_layout LyX-Code
private:
\end_layout

\begin_deeper
\begin_layout LyX-Code
int donneePrivee;
\end_layout

\end_deeper
\begin_layout LyX-Code
public:
\end_layout

\begin_deeper
\begin_layout LyX-Code
int lectureDonnee();
\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout LyX-Code
/* Attention à la notation */
\end_layout

\begin_layout LyX-Code
int NomDeLaClasse::lectureDonnee() {
\end_layout

\begin_deeper
\begin_layout LyX-Code
return donneePrivee;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
Création d'un objet et durée de vie
\end_layout

\begin_layout Standard
Une classe définit un nouveau type de donnée, utilisable comme les types
 de base pour la définition de variables locales, de paramètres de fonctions/mét
hodes.
 On pourra donc avoir :
\end_layout

\begin_layout LyX-Code
void fct() {
\end_layout

\begin_deeper
\begin_layout LyX-Code
NomDeLaClasse objetSurLaPile;
\end_layout

\begin_layout LyX-Code
NomDeLaClasse taleauObjets[10];
\end_layout

\begin_layout LyX-Code
NomDeLaClasse *objetAlloueDynamiquement = new NomDeLaClasse();
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
/* Un objet alloué dynamiquement devra être détruit de façon explicite */
\end_layout

\begin_layout LyX-Code
delete objetAlloueDynamiquement;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/*
\end_layout

\begin_layout LyX-Code
 * Les variables locales objetSurLaPile et tableauObjets, allouées
\end_layout

\begin_layout LyX-Code
 * implicitement sur la pile sont détruits et libérés lors du retour 
\end_layout

\begin_layout LyX-Code
 * de la fonction
\end_layout

\begin_layout LyX-Code
 */
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
Constructeur et destructeur
\end_layout

\end_body
\end_document
